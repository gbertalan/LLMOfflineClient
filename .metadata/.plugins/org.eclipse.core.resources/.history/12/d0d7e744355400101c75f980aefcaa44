import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.concurrent.Flow;

public class Frame extends JFrame {
    private JComboBox<String> modelDropdown;
    private JTextArea chatArea;
    private JTextArea promptArea;
    private JButton sendButton;
    private StringBuilder llmResponseBuilder;

    public Frame() {
        setTitle("Local LLM Client");
        setSize(1000, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        String[] models = {"codellama:7b", "llama2:7b", "mistral:7b", "gemma:7b"};
        modelDropdown = new JComboBox<>(models);
        add(modelDropdown, BorderLayout.NORTH);

        JPanel centerContainer = new JPanel();
        centerContainer.setLayout(new BoxLayout(centerContainer, BoxLayout.Y_AXIS));
        add(centerContainer, BorderLayout.CENTER);

        JPanel chatPanel = new JPanel(new BorderLayout());
        chatArea = new JTextArea();
        chatArea.setEditable(false);
        JScrollPane chatScroll = new JScrollPane(chatArea);
        chatPanel.add(chatScroll, BorderLayout.CENTER);
        centerContainer.add(chatPanel);

        JPanel inputPanel = new JPanel(new BorderLayout());
        promptArea = new JTextArea();
        promptArea.setLineWrap(true);
        JScrollPane promptScroll = new JScrollPane(promptArea);
        inputPanel.add(promptScroll, BorderLayout.CENTER);

        sendButton = new JButton("Send");
        inputPanel.add(sendButton, BorderLayout.EAST);
        centerContainer.add(inputPanel);

        sendButton.addActionListener(e -> sendPrompt());
        promptArea.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && !e.isShiftDown()) {
                    e.consume();
                    sendPrompt();
                }
            }
        });

        setVisible(true);
    }

    private void sendPrompt() {
        String prompt = promptArea.getText().trim();
        if (prompt.isEmpty()) return;

        chatArea.append("User: " + prompt + "\n\n");
        promptArea.setText("");
        llmResponseBuilder = new StringBuilder();

        String selectedModel = (String) modelDropdown.getSelectedItem();
        String ollamaUrl = "http://localhost:11434/api/generate";

        String requestBody = String.format("{\"model\": \"%s\", \"prompt\": \"%s\"}", selectedModel, prompt);

        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(ollamaUrl))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

        client.sendAsync(request, HttpResponse.BodyHandlers.ofLines())
            .thenAccept(response -> {
                if (response.statusCode() == 200) {
                    response.body().forEach(line -> {
                        if (line.contains("\"response\":\"")) {
                            String[] parts = line.split("\"response\":\"");
                            if (parts.length > 1) {
                                String responsePart = parts[1].split("\"")[0];
                                llmResponseBuilder.append(responsePart);
                                SwingUtilities.invokeLater(() -> {
                                    chatArea.setText(chatArea.getText().replaceFirst(
                                        "(?s)LLM:.*", 
                                        "LLM: " + llmResponseBuilder.toString()
                                    ));
                                });
                            }
                        }
                    });
                    SwingUtilities.invokeLater(() -> chatArea.append("\n\n"));
                } else {
                    SwingUtilities.invokeLater(() -> chatArea.append("Error: HTTP " + response.statusCode() + "\n\n"));
                }
            })
            .exceptionally(ex -> {
                SwingUtilities.invokeLater(() -> chatArea.append("Error: " + ex.getMessage() + "\n\n"));
                return null;
            });
    }
}